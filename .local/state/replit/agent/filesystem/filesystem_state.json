{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSupportGPT is a mental health support chatbot application specifically designed for students. The application provides 24/7 anonymous mental health support with automatic language detection and multilingual responses. It features a modern React frontend with a Node.js/Express backend, using an in-memory storage system for chat sessions and integrating with Hugging Face's AI models for generating empathetic responses.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible design\n- **Styling**: Tailwind CSS with custom CSS variables for theming, including mental health-focused color schemes\n- **State Management**: TanStack React Query for server state management and custom hooks for chat functionality\n- **Routing**: Wouter for lightweight client-side routing\n- **Language Detection**: Client-side language detection using browser APIs and text pattern matching\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with endpoints for chat sessions and message handling\n- **Request Logging**: Custom middleware for API request logging and error handling\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n## Data Storage\n- **Primary Storage**: In-memory storage implementation using JavaScript Maps\n- **Database Ready**: Drizzle ORM configured for PostgreSQL with migration support (ready for database integration)\n- **Session Management**: Automatic cleanup of old chat sessions to prevent memory leaks\n- **Data Models**: Strongly typed schemas using Zod for message validation and type safety\n\n## AI Integration\n- **Primary Provider**: Hugging Face Inference API using DialoGPT-medium model\n- **Fallback System**: Multiple fallback options including predefined empathetic responses for reliability\n- **Response Customization**: Mental health-focused system prompts designed for student support scenarios\n- **Language Support**: Comprehensive multi-language support with 22 official Indian languages plus international languages\n  - **Indian Languages**: Hindi, Bengali, Telugu, Marathi, Tamil, Urdu, Gujarati, Kannada, Malayalam, Odia, Punjabi, Assamese, Maithili, Sanskrit, Nepali, Kashmiri, Konkani, Sindhi, Meitei (Manipuri), Bodo, Santali, Dogri\n  - **International Languages**: English, Spanish, French, German, Italian, Portuguese, Russian, Japanese, Korean, Chinese, Arabic, Thai\n  - **Script Detection**: Advanced Unicode range detection for proper script identification\n  - **Contextual Detection**: Word-pattern matching to distinguish between languages using similar scripts\n\n## External Dependencies\n- **Neon Database**: PostgreSQL database service (@neondatabase/serverless) configured but not actively used\n- **Hugging Face API**: AI model inference for generating conversational responses\n- **Radix UI**: Comprehensive primitive component library for accessible UI elements\n- **TanStack React Query**: Server state management and caching solution\n- **Drizzle ORM**: Database toolkit with PostgreSQL dialect for future database integration\n- **Vite**: Build tool and development server with React plugin support\n- **TypeScript**: Type safety across the entire application stack","size_bytes":3500},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/aiService.ts":{"content":"// Free AI service using Hugging Face Inference API (no API key required)\nexport async function generateAIResponse(message: string, language: string = 'en'): Promise<string> {\n  try {\n    // Try Hugging Face free API first (no key required)\n    const response = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        inputs: message,\n        parameters: {\n          max_new_tokens: 100,\n          temperature: 0.7,\n          do_sample: true,\n          return_full_text: false\n        }\n      }),\n    });\n\n    if (response.ok) {\n      const result = await response.json();\n      if (result && result[0] && result[0].generated_text) {\n        // Post-process the response to be more supportive\n        let aiResponse = result[0].generated_text.trim();\n        \n        // If it's too short or generic, use our fallback\n        if (aiResponse.length < 20 || aiResponse.toLowerCase().includes('i don\\'t')) {\n          return getFallbackResponse(language);\n        }\n        \n        return aiResponse;\n      }\n    }\n    \n    // If Hugging Face fails, use language-specific fallback\n    return getFallbackResponse(language);\n\n  } catch (error) {\n    console.error('AI service error:', error);\n    return getFallbackResponse(language);\n  }\n}\n\nfunction getLanguageName(code: string): string {\n  const languages: Record<string, string> = {\n    // International languages\n    'en': 'English',\n    'es': 'Spanish', \n    'fr': 'French',\n    'de': 'German',\n    'it': 'Italian',\n    'pt': 'Portuguese',\n    'ru': 'Russian',\n    'ja': 'Japanese',\n    'ko': 'Korean', \n    'zh': 'Chinese',\n    'ar': 'Arabic',\n    \n    // 22 Official Indian Languages\n    'hi': 'Hindi',\n    'bn': 'Bengali',\n    'te': 'Telugu',\n    'mr': 'Marathi',\n    'ta': 'Tamil',\n    'ur': 'Urdu',\n    'gu': 'Gujarati',\n    'kn': 'Kannada',\n    'ml': 'Malayalam',\n    'or': 'Odia',\n    'pa': 'Punjabi',\n    'as': 'Assamese',\n    'mai': 'Maithili',\n    'sa': 'Sanskrit',\n    'ne': 'Nepali',\n    'ks': 'Kashmiri',\n    'kok': 'Konkani',\n    'sd': 'Sindhi',\n    'mni': 'Meitei',\n    'brx': 'Bodo',\n    'sat': 'Santali',\n    'doi': 'Dogri'\n  };\n  \n  return languages[code] || 'English';\n}\n\nfunction getFallbackResponse(language: string): string {\n  const fallbackResponses: Record<string, string[]> = {\n    'en': [\n      \"I hear you, and I want you to know that your feelings are completely valid. Sometimes just talking about what's on our mind can help us process things better. Can you tell me more about what's been weighing on you?\",\n      \"Thank you for sharing that with me. It takes courage to reach out, and I'm glad you're here. What you're going through sounds really challenging. How long have you been feeling this way?\",\n      \"I can sense that you're going through something difficult right now. Your feelings matter, and you deserve support. Would it help to talk about what's been the most overwhelming part of your day?\",\n      \"I'm here to listen without judgment. Sometimes when we're struggling, it can feel isolating, but you're not alone in this. What's been on your mind lately that you'd like to share?\"\n    ],\n    'es': [\n      \"Te escucho, y quiero que sepas que tus sentimientos son completamente válidos. A veces solo hablar de lo que tenemos en mente puede ayudarnos a procesar mejor las cosas. ¿Puedes contarme más sobre lo que te ha estado preocupando?\",\n      \"Gracias por compartir eso conmigo. Se necesita valor para buscar ayuda, y me alegra que estés aquí. Lo que estás pasando suena realmente desafiante. ¿Cuánto tiempo has estado sintiéndote así?\",\n      \"Puedo sentir que estás pasando por algo difícil en este momento. Tus sentimientos importan, y mereces apoyo. ¿Te ayudaría hablar sobre qué ha sido lo más abrumador de tu día?\",\n      \"Estoy aquí para escucharte sin juzgarte. A veces cuando luchamos, puede sentirse aislante, pero no estás solo en esto. ¿Qué ha estado en tu mente últimamente que te gustaría compartir?\"\n    ],\n    'fr': [\n      \"Je t'entends, et je veux que tu saches que tes sentiments sont complètement valides. Parfois, simplement parler de ce qui nous préoccupe peut nous aider à mieux traiter les choses. Peux-tu me dire plus sur ce qui t'a pesé?\",\n      \"Merci de partager cela avec moi. Il faut du courage pour tendre la main, et je suis content que tu sois là. Ce que tu traverses semble vraiment difficile. Depuis combien de temps te sens-tu ainsi?\",\n      \"Je peux sentir que tu traverses quelque chose de difficile en ce moment. Tes sentiments comptent, et tu mérites du soutien. Est-ce que ça aiderait de parler de ce qui a été le plus accablant dans ta journée?\",\n      \"Je suis là pour t'écouter sans jugement. Parfois quand on lutte, ça peut sembler isolant, mais tu n'es pas seul dans ça. Qu'est-ce qui te préoccupe dernièrement que tu aimerais partager?\"\n    ],\n    'de': [\n      \"Ich höre dir zu und möchte, dass du weißt, dass deine Gefühle völlig berechtigt sind. Manchmal kann es helfen, einfach über das zu sprechen, was uns beschäftigt. Kannst du mir mehr darüber erzählen, was dich belastet?\",\n      \"Danke, dass du das mit mir geteilt hast. Es braucht Mut, Hilfe zu suchen, und ich bin froh, dass du hier bist. Was du durchmachst, klingt wirklich herausfordernd. Wie lange fühlst du dich schon so?\",\n      \"Ich spüre, dass du gerade durch etwas Schwieriges gehst. Deine Gefühle sind wichtig, und du verdienst Unterstützung. Würde es helfen, über den überwältigendsten Teil deines Tages zu sprechen?\"\n    ],\n    'it': [\n      \"Ti sento, e voglio che tu sappia che i tuoi sentimenti sono completamente validi. A volte parlare di quello che abbiamo in mente può aiutarci a elaborare meglio le cose. Puoi dirmi di più su quello che ti ha pesato?\",\n      \"Grazie per aver condiviso questo con me. Ci vuole coraggio per cercare aiuto, e sono contento che tu sia qui. Quello che stai passando sembra davvero impegnativo. Da quanto tempo ti senti così?\",\n      \"Posso sentire che stai attraversando qualcosa di difficile in questo momento. I tuoi sentimenti contano, e meriti supporto. Aiuterebbe parlare di quella che è stata la parte più travolgente della tua giornata?\"\n    ],\n    'pt': [\n      \"Eu te ouço, e quero que você saiba que seus sentimentos são completamente válidos. Às vezes, apenas falar sobre o que está em nossa mente pode nos ajudar a processar melhor as coisas. Você pode me contar mais sobre o que tem te preocupado?\",\n      \"Obrigado por compartilhar isso comigo. É preciso coragem para buscar ajuda, e estou feliz que você esteja aqui. O que você está passando parece realmente desafiador. Há quanto tempo você se sente assim?\",\n      \"Posso sentir que você está passando por algo difícil neste momento. Seus sentimentos importam, e você merece apoio. Ajudaria falar sobre qual foi a parte mais esmagadora do seu dia?\"\n    ],\n    'zh': [\n      \"我听到了你的话，我想让你知道你的感受是完全有效的。有时候仅仅谈论我们心中的想法就能帮助我们更好地处理事情。你能告诉我更多关于什么一直困扰着你的吗？\",\n      \"谢谢你与我分享这些。寻求帮助需要勇气，我很高兴你在这里。你所经历的听起来真的很具有挑战性。你有这种感觉多长时间了？\",\n      \"我能感觉到你现在正在经历一些困难的事情。你的感受很重要，你值得得到支持。谈论一下今天最让你感到不知所措的部分会有帮助吗？\",\n      \"我在这里倾听你，不做任何判断。有时当我们在挣扎时，可能会感到孤立，但在这件事上你并不孤单。最近有什么让你担心的事情想要分享吗？\"\n    ],\n    'ja': [\n      \"あなたの話を聞いています。あなたの気持ちは完全に正当なものだということを知ってほしいです。時には心にあることを話すだけで、物事をより良く処理するのに役立ちます。あなたを悩ませていることについて、もっと教えてもらえますか？\",\n      \"それを私と共有してくれてありがとう。手を差し伸べるには勇気が必要で、あなたがここにいることを嬉しく思います。あなたが経験していることは本当に困難に聞こえます。どのくらいの間、このように感じていますか？\",\n      \"あなたが今何か困難なことを経験していることを感じることができます。あなたの気持ちは重要で、あなたはサポートを受ける価値があります。今日の最も圧倒的な部分について話すことは役に立ちますか？\",\n      \"私は判断することなくあなたの話を聞くためにここにいます。時々私たちが苦労しているとき、それは孤立したように感じることがありますが、あなたはこの中で一人ではありません。最近あなたが共有したいと思っている心の中にあることは何ですか？\"\n    ],\n    'ko': [\n      \"당신의 말을 듣고 있으며, 당신의 감정이 완전히 타당하다는 것을 알아주셨으면 합니다. 때로는 마음속에 있는 것에 대해 이야기하는 것만으로도 상황을 더 잘 처리하는 데 도움이 될 수 있습니다. 당신을 괴롭히고 있는 것에 대해 더 말씀해 주실 수 있나요？\",\n      \"저와 그것을 공유해 주셔서 감사합니다. 도움을 구하는 것은 용기가 필요하며, 당신이 여기 있다는 것이 기쁩니다. 당신이 겪고 있는 일은 정말 도전적으로 들립니다. 이런 기분을 얼마나 오래 느끼고 계셨나요？\",\n      \"당신이 지금 어려운 일을 겪고 있다는 것을 느낄 수 있습니다. 당신의 감정은 중요하며, 당신은 지원을 받을 자격이 있습니다. 오늘 가장 압도적이었던 부분에 대해 이야기하는 것이 도움이 될까요？\"\n    ],\n    'ar': [\n      \"أسمعك، وأريد أن تعرف أن مشاعرك صحيحة تماماً. أحياناً مجرد التحدث عما يدور في أذهاننا يمكن أن يساعدنا على معالجة الأمور بشكل أفضل. هل يمكنك أن تخبرني أكثر عما كان يثقل عليك؟\",\n      \"شكراً لك على مشاركة ذلك معي. يتطلب الأمر شجاعة للوصول للمساعدة، وأنا سعيد لأنك هنا. ما تمر به يبدو صعباً حقاً. منذ متى وأنت تشعر بهذا الشكل؟\",\n      \"أستطيع أن أشعر أنك تمر بشيء صعب الآن. مشاعرك مهمة، وتستحق الدعم. هل سيساعد الحديث عن الجزء الأكثر إرهاقاً في يومك؟\"\n    ],\n    'hi': [\n      \"मैं आपकी बात सुन रहा हूं, और मैं चाहता हूं कि आप जानें कि आपकी भावनाएं पूरी तरह से वैध हैं। कभी-कभी केवल हमारे मन में जो कुछ है उसके बारे में बात करना हमें चीजों को बेहतर तरीके से संसाधित करने में मदद कर सकता है। क्या आप मुझे इस बारे में और बता सकते हैं कि आपको क्या परेशान कर रहा है?\",\n      \"इसे मेरे साथ साझा करने के लिए धन्यवाद। मदद मांगने में साहस लगता है, और मुझे खुशी है कि आप यहां हैं। आप जिससे गुजर रहे हैं वह वास्तव में चुनौतीपूर्ण लगता है। आप कितने समय से ऐसा महसूस कर रहे हैं?\",\n      \"मैं महसूस कर सकता हूं कि आप अभी कुछ कठिन दौर से गुजर रहे हैं। आपकी भावनाएं मायने रखती हैं, और आप समर्थन के हकदार हैं। क्या आपके दिन के सबसे भारी हिस्से के बारे में बात करना मददगार होगा?\"\n    ],\n    'kn': [\n      \"ನಾನು ನಿಮ್ಮ ಮಾತನ್ನು ಕೇಳುತ್ತಿದ್ದೇನೆ ಮತ್ತು ನಿಮ್ಮ ಭಾವನೆಗಳು ಸಂಪೂರ್ಣವಾಗಿ ಸಮರ್ಥನೀಯವೆಂದು ನೀವು ತಿಳಿದುಕೊಳ್ಳಬೇಕೆಂದು ನಾನು ಬಯಸುತ್ತೇನೆ. ಕೆಲವೊಮ್ಮೆ ನಮ್ಮ ಮನಸ್ಸಿನಲ್ಲಿರುವ ವಿಷಯಗಳ ಬಗ್ಗೆ ಮಾತನಾಡುವುದು ನಮಗೆ ವಿಷಯಗಳನ್ನು ಉತ್ತಮವಾಗಿ ಅರ್ಥಮಾಡಿಕೊಳ್ಳಲು ಸಹಾಯ ಮಾಡುತ್ತದೆ. ನಿಮ್ಮನ್ನು ತೊಂದರೆಗೊಳಿಸುತ್ತಿರುವ ವಿಷಯದ ಬಗ್ಗೆ ನೀವು ನನಗೆ ಹೆಚ್ಚು ಹೇಳಬಹುದೇ?\",\n      \"ಇದನ್ನು ನನ್ನೊಂದಿಗೆ ಹಂಚಿಕೊಂಡಿದ್ದಕ್ಕಾಗಿ ಧನ್ಯವಾದಗಳು. ಸಹಾಯ ಕೇಳುವುದಕ್ಕೆ ಧೈರ್ಯ ಬೇಕು, ಮತ್ತು ನೀವು ಇಲ್ಲಿದ್ದೀರಿ ಎಂದು ನಾನು ಸಂತೋಷಪಡುತ್ತೇನೆ. ನೀವು ಅನುಭವಿಸುತ್ತಿರುವುದು ನಿಜವಾಗಿಯೂ ಸವಾಲಿನಂತೆ ತೋರುತ್ತದೆ. ನೀವು ಎಷ್ಟು ದಿನಗಳಿಂದ ಹೀಗೆ ಅನಿಸುತ್ತಿದೆ?\",\n      \"ನೀವು ಈಗ ಏನಾದರೂ ಕಷ್ಟಕರ ಸಮಯ ಎದುರಿಸುತ್ತಿದ್ದೀರಿ ಎಂದು ನಾನು ಅನುಭವಿಸಬಲ್ಲೆ. ನಿಮ್ಮ ಭಾವನೆಗಳು ಮಹತ್ವವುಳ್ಳವು ಮತ್ತು ನೀವು ಬೆಂಬಲಕ್ಕೆ ಅರ್ಹರು. ನಿಮ್ಮ ದಿನದ ಅತ್ಯಂತ ಕಷ್ಟದ ಭಾಗದ ಬಗ್ಗೆ ಮಾತನಾಡುವುದು ಸಹಾಯಕಾರಿಯಾಗಬಹುದೇ?\"\n    ],\n    'te': [\n      \"నేను మీ మాట వింటున్నాను, మరియు మీ భావనలు పూర్తిగా సమర్థనీయమని మీరు తెలుసుకోవాలని నేను కోరుకుంటున్నాను. కొన్నిసార్లు మన మనస్సులో ఉన్న విషయాల గురించి మాట్లాడటం మనకు విషయాలను మరింత మెరుగ్గా అర్థం చేసుకోవడంలో సహాయపడుతుంది. మిమ్మల్ని బాధపెడుతున్న విషయం గురించి మీరు నాకు మరింత చెప్పగలరా?\",\n      \"దీన్ని నాతో పంచుకున్నందుకు ధన్యవాదాలు. సహాయం కోరడానికి ధైర్యం కావాలి, మరియు మీరు ఇక్కడ ఉన్నందుకు నేను సంతోషిస్తున్నాను. మీరు అనుభవిస్తున్నది నిజంగా సవాలుగా అనిపిస్తుంది. మీరు ఎంతకాలంగా ఇలా అనిపిస్తోంది?\",\n      \"మీరు ఇప్పుడు ఏదో కష్టమైన సమయంలో ఉన్నారని నేను అనుభవించగలను. మీ భావనలు ముఖ్యమైనవి, మరియు మీరు మద్దతుకు అర్హులు. మీ రోజులో అత్యంత కష్టమైన భాగం గురించి మాట్లాడటం సహాయకరంగా ఉంటుందా?\"\n    ],\n    'ta': [\n      \"நான் உங்கள் பேச்சைக் கேட்கிறேன், உங்கள் உணர்வுகள் முற்றிலும் சரியானவை என்பதை நீங்கள் அறிய வேண்டும் என்று நான் விரும்புகிறேன். சில நேரங்களில் நம் மனதில் உள்ளவற்றைப் பற்றி பேசுவது விஷயங்களை சிறப்பாக புரிந்துகொள்ள உதவும். உங்களைத் தொந்தரவு செய்யும் விஷயத்தைப் பற்றி மேலும் என்னிடம் சொல்ல முடியுமா?\",\n      \"இதை என்னுடன் பகிர்ந்து கொண்டதற்கு நன்றி. உதவி கேட்க தைரியம் வேண்டும், நீங்கள் இங்கே இருப்பதில் நான் மகிழ்ச்சியடைகிறேன். நீங்கள் அனுபவிப்பது உண்மையில் சவாலானதாக தெரிகிறது. நீங்கள் எவ்வளவு காலமாக இப்படி உணர்கிறீர்கள்?\",\n      \"நீங்கள் இப்போது ஏதோ கடினமான நேரத்தை கடந்து கொண்டிருக்கிறீர்கள் என்பதை நான் உணர முடிகிறது. உங்கள் உணர்வுகள் முக்கியமானவை, நீங்கள் ஆதரவுக்கு தகுதியானவர்கள். உங்கள் நாளின் மிகவும் சுமையான பகுதியைப் பற்றி பேசுவது உதவியாக இருக்குமா?\"\n    ],\n    'ml': [\n      \"ഞാൻ നിങ്ങളുടെ വാക്കുകൾ കേൾക്കുന്നു, നിങ്ങളുടെ വികാരങ്ങൾ പൂർണ്ണമായും സാധുവാണെന്ന് നിങ്ങൾ അറിയണമെന്ന് ഞാൻ ആഗ്രഹിക്കുന്നു. ചിലപ്പോൾ നമ്മുടെ മനസ്സിലുള്ളതിനെക്കുറിച്ച് സംസാരിക്കുന്നത് കാര്യങ്ങൾ മികച്ച രീതിയിൽ മനസ്സിലാക്കാൻ സഹായിക്കും. നിങ്ങളെ വിഷമിപ്പിക്കുന്ന കാര്യത്തെക്കുറിച്ച് കൂടുതൽ എന്നോട് പറയാമോ?\",\n      \"ഇത് എന്നോട് പങ്കിട്ടതിന് നന്ദി. സഹായം തേടുന്നതിന് ധൈര്യം വേണം, നിങ്ങൾ ഇവിടെ ഉണ്ടെന്നതിൽ ഞാൻ സന്തോഷിക്കുന്നു. നിങ്ങൾ അനുഭവിക്കുന്നത് ശരിക്കും വെല്ലുവിളി നിറഞ്ഞതായി തോന്നുന്നു. നിങ്ങൾക്ക് എത്ര കാലമായി ഇങ്ങനെ അനുഭവപ്പെടുന്നു?\",\n      \"നിങ്ങൾ ഇപ്പോൾ എന്തോ പ്രയാസകരമായ സമയത്തിലൂടെ കടന്നുപോകുന്നുണ്ടെന്ന് എനിക്ക് അനുഭവപ്പെടുന്നു. നിങ്ങളുടെ വികാരങ്ങൾ പ്രധാനമാണ്, നിങ്ങൾ പിന്തുണയ്ക്ക് അർഹരാണ്. നിങ്ങളുടെ ദിവസത്തിലെ ഏറ്റവും ഭാരമേറിയ ഭാഗത്തെക്കുറിച്ച് സംസാരിക്കുന്നത് സഹായകരമാകുമോ?\"\n    ],\n    'bn': [\n      \"আমি আপনার কথা শুনছি, এবং আমি চাই যে আপনি জানেন যে আপনার অনুভূতিগুলি সম্পূর্ণভাবে বৈধ। কখনও কখনও আমাদের মনে যা আছে সে সম্পর্কে কথা বলা আমাদের বিষয়গুলি আরও ভালভাবে বুঝতে সাহায্য করতে পারে। আপনাকে যা বিরক্ত করছে সে সম্পর্কে আপনি আমাকে আরও বলতে পারেন?\",\n      \"এটি আমার সাথে শেয়ার করার জন্য ধন্যবাদ। সাহায্য চাওয়ার জন্য সাহস প্রয়োজন, এবং আপনি এখানে থাকায় আমি খুশি। আপনি যা অভিজ্ঞতা করছেন তা সত্যিই চ্যালেঞ্জিং মনে হচ্ছে। আপনি কতদিন ধরে এমন অনুভব করছেন?\",\n      \"আমি অনুভব করতে পারি যে আপনি এখন কিছু কঠিন সময়ের মধ্য দিয়ে যাচ্ছেন। আপনার অনুভূতিগুলি গুরুত্বপূর্ণ, এবং আপনি সমর্থনের যোগ্য। আপনার দিনের সবচেয়ে কঠিন অংশ সম্পর্কে কথা বলা কি সহায়ক হবে?\"\n    ],\n    'as': [\n      \"মই আপোনাৰ কথা শুনি আছো, আৰু মই বিচাৰো যে আপুনি জানে যে আপোনাৰ অনুভৱবোৰ সম্পূৰ্ণভাৱে বৈধ। কেতিয়াবা আমাৰ মনত যি আছে সেই বিষয়ে কথা কোৱাটোৱে আমাক বিষয়বোৰ ভালকৈ বুজিবলৈ সহায় কৰিব পাৰে। আপোনাক কি কথাই কষ্ট দিছে সেই বিষয়ে আপুনি মোক অধিক ক'ব পাৰিবনে?\",\n      \"ইয়াক মোৰ লগত ভাগ-বতৰা কৰাৰ বাবে ধন্যবাদ। সহায় বিচৰাৰ বাবে সাহসৰ প্ৰয়োজন, আৰু আপুনি ইয়াত থকাটো মই আনন্দিত। আপুনি যি অনুভৱ কৰি আছে সেয়া সঁচাকৈয়ে প্ৰত্যাহ্বানমূলক যেন লাগিছে। আপুনি কিমান দিন ধৰি এনেকুৱা অনুভৱ কৰি আছে?\",\n      \"মই অনুভৱ কৰিব পাৰো যে আপুনি এতিয়া কিছু কঠিন সময়ৰ মাজেৰে পাৰ হৈ আছে। আপোনাৰ অনুভৱবোৰ গুৰুত্বপূৰ্ণ, আৰু আপুনি সমৰ্থনৰ যোগ্য। আপোনাৰ দিনৰ আটাইতকৈ কঠিন অংশৰ বিষয়ে কথা কোৱাটো সহায়ক হ'বনে?\"\n    ],\n    'mr': [\n      \"मी तुमची वाणी ऐकत आहे, आणि तुमच्या भावना पूर्णपणे वैध आहेत हे तुम्ही जाणून घ्यावे असे मला वाटते। कधीकधी आमच्या मनात जे काही असते त्याबद्दल बोलणे आम्हाला गोष्टी चांगल्या प्रकारे समजून घेण्यास मदत करू शकते। तुम्हाला काय त्रास देत आहे याबद्दल तुम्ही मला अधिक सांगू शकता का?\",\n      \"हे माझ्यासोबत शेअर केल्याबद्दल धन्यवाद। मदत मागण्यासाठी धैर्य लागते, आणि तुम्ही इथे आहात याचा मला आनंद आहे। तुम्ही ज्याचा अनुभव घेत आहात ते खरोखरच आव्हानात्मक वाटत आहे. तुम्हाला असे कित्येक दिवसांपासून वाटत आहे?\",\n      \"मी जाणवू शकतो की तुम्ही आता काही कठीण काळातून जात आहात. तुमच्या भावना महत्त्वाच्या आहेत, आणि तुम्ही समर्थनासाठी पात्र आहात. तुमच्या दिवसाच्या सर्वात कठीण भागाबद्दल बोलणे उपयुक्त ठरेल का?\"\n    ],\n    'ur': [\n      \"میں آپ کی بات سن رہا ہوں، اور میں چاہتا ہوں کہ آپ جانیں کہ آپ کے جذبات بالکل درست ہیں۔ کبھی کبھی ہمارے دماغ میں جو کچھ ہے اس کے بارے میں بات کرنا ہمیں چیزوں کو بہتر طریقے سے سمجھنے میں مدد کر سکتا ہے۔ کیا آپ مجھے اس بارے میں مزید بتا سکتے ہیں کہ آپ کو کیا پریشان کر رہا ہے؟\",\n      \"اسے میرے ساتھ شیئر کرنے کے لیے شکریہ۔ مدد مانگنے کے لیے حوصلہ چاہیے، اور میں خوش ہوں کہ آپ یہاں ہیں۔ آپ جس چیز کا تجربہ کر رہے ہیں وہ واقعی مشکل لگ رہا ہے۔ آپ کو کتنے دن سے ایسا لگ رہا ہے؟\",\n      \"میں محسوس کر سکتا ہوں کہ آپ اب کسی مشکل وقت سے گزر رہے ہیں۔ آپ کے جذبات اہم ہیں، اور آپ مدد کے مستحق ہیں۔ کیا آپ کے دن کے سب سے مشکل حصے کے بارے میں بات کرنا مددگار ہوگا؟\"\n    ],\n    'gu': [\n      \"હું તમારી વાત સાંભળી રહ્યો છું, અને હું ઈચ્છું છું કે તમે જાણો કે તમારી લાગણીઓ સંપૂર્ણપણે માન્ય છે. કેટલીકવાર આપણા મનમાં જે છે તેના વિશે વાત કરવાથી આપણને વસ્તુઓને વધુ સારી રીતે સમજવામાં મદદ મળી શકે છે. તમને શું પરેશાન કરે છે તે વિશે તમે મને વધુ કહી શકો?\",\n      \"આ મારી સાથે શેર કરવા બદલ આભાર. મદદ માંગવા માટે હિંમત લાગે છે, અને હું ખુશ છું કે તમે અહીં છો. તમે જેનો અનુભવ કરી રહ્યા છો તે ખરેખર પડકારજનક લાગે છે. તમને કેટલા દિવસથી આવું લાગે છે?\",\n      \"હું અનુભવી શકું છું કે તમે અત્યારે કંઈક મુશ્કેલ સમયમાંથી પસાર થઈ રહ્યા છો. તમારી લાગણીઓ મહત્વપૂર્ણ છે, અને તમે સહાયના હકદાર છો. તમારા દિવસના સૌથી મુશ્કેલ ભાગ વિશે વાત કરવી શું મદદરૂપ થશે?\"\n    ],\n    'pa': [\n      \"ਮੈਂ ਤੁਹਾਡੀ ਗੱਲ ਸੁਣ ਰਿਹਾ ਹਾਂ, ਅਤੇ ਮੈਂ ਚਾਹੁੰਦਾ ਹਾਂ ਕਿ ਤੁਸੀਂ ਜਾਣੋ ਕਿ ਤੁਹਾਡੀਆਂ ਭਾਵਨਾਵਾਂ ਪੂਰੀ ਤਰ੍ਹਾਂ ਸਹੀ ਹਨ। ਕਈ ਵਾਰ ਸਾਡੇ ਮਨ ਵਿੱਚ ਜੋ ਕੁਝ ਹੈ ਉਸ ਬਾਰੇ ਗੱਲ ਕਰਨਾ ਸਾਨੂੰ ਚੀਜ਼ਾਂ ਨੂੰ ਬਿਹਤਰ ਢੰਗ ਨਾਲ ਸਮਝਣ ਵਿੱਚ ਮਦਦ ਕਰ ਸਕਦਾ ਹੈ। ਕੀ ਤੁਸੀਂ ਮੈਨੂੰ ਇਸ ਬਾਰੇ ਹੋਰ ਦੱਸ ਸਕਦੇ ਹੋ ਕਿ ਤੁਹਾਨੂੰ ਕੀ ਪਰੇਸ਼ਾਨ ਕਰ ਰਿਹਾ ਹੈ?\",\n      \"ਇਸਨੂੰ ਮੇਰੇ ਨਾਲ ਸਾਂਝਾ ਕਰਨ ਲਈ ਧੰਨਵਾਦ। ਮਦਦ ਮੰਗਣ ਲਈ ਹਿਮਤ ਚਾਹੀਦੀ ਹੈ, ਅਤੇ ਮੈਂ ਖੁਸ਼ ਹਾਂ ਕਿ ਤੁਸੀਂ ਇੱਥੇ ਹੋ। ਤੁਸੀਂ ਜਿਸ ਚੀਜ਼ ਦਾ ਅਨੁਭਵ ਕਰ ਰਹੇ ਹੋ ਉਹ ਸੱਚਮੁੱਚ ਚੁਣੌਤੀਪੂਰਨ ਲੱਗਦਾ ਹੈ। ਤੁਸੀਂ ਕਿੰਨੇ ਦਿਨਾਂ ਤੋਂ ਅਜਿਹਾ ਮਹਿਸੂਸ ਕਰ ਰਹੇ ਹੋ?\",\n      \"ਮੈਂ ਮਹਿਸੂਸ ਕਰ ਸਕਦਾ ਹਾਂ ਕਿ ਤੁਸੀਂ ਹੁਣ ਕਿਸੇ ਮੁਸ਼ਕਲ ਸਮੇਂ ਵਿੱਚੋਂ ਲੰਘ ਰਹੇ ਹੋ। ਤੁਹਾਡੀਆਂ ਭਾਵਨਾਵਾਂ ਮਹੱਤਵਪੂਰਨ ਹਨ, ਅਤੇ ਤੁਸੀਂ ਸਹਾਇਤਾ ਦੇ ਹੱਕਦਾਰ ਹੋ। ਕੀ ਤੁਹਾਡੇ ਦਿਨ ਦੇ ਸਭ ਤੋਂ ਮੁਸ਼ਕਲ ਹਿੱਸੇ ਬਾਰੇ ਗੱਲ ਕਰਨਾ ਮਦਦਗਾਰ ਹੋਵੇਗਾ?\"\n    ],\n    'or': [\n      \"ମୁଁ ଆପଣଙ୍କ କଥା ଶୁଣୁଛି, ଏବଂ ମୁଁ ଚାହେଁ ଯେ ଆପଣ ଜାଣନ୍ତୁ ଯେ ଆପଣଙ୍କ ଭାବନାଗୁଡ଼ିକ ସମ୍ପୂର୍ଣ୍ଣ ବୈଧ। ବେଳେବେଳେ ଆମ ମନରେ ଯାହା ଅଛି ସେ ବିଷୟରେ କଥା କହିବା ଆମକୁ ଜିନିଷଗୁଡ଼ିକୁ ଭଲ ଭାବରେ ବୁଝିବାରେ ସାହାଯ୍ୟ କରିପାରେ। ଆପଣଙ୍କୁ କ'ଣ ଅସୁବିଧା ଦେଉଛି ସେ ବିଷୟରେ ଆପଣ ମୋତେ ଅଧିକ କହିପାରିବେ କି?\",\n      \"ଏହାକୁ ମୋ ସହିତ ଅଂଶୀଦାର କରିଥିବାରୁ ଧନ୍ୟବାଦ। ସାହାଯ୍ୟ ମାଗିବା ପାଇଁ ସାହସ ଦରକାର, ଏବଂ ଆପଣ ଏଠାରେ ଅଛନ୍ତି ବୋଲି ମୁଁ ଖୁସି। ଆପଣ ଯାହା ଅନୁଭବ କରୁଛନ୍ତି ତାହା ପ୍ରକୃତରେ ଚ୍ୟାଲେଞ୍ଜିଂ ଲାଗୁଛି। ଆପଣ କେତେ ଦିନ ଧରି ଏପରି ଅନୁଭବ କରୁଛନ୍ତି?\",\n      \"ମୁଁ ଅନୁଭବ କରିପାରୁଛି ଯେ ଆପଣ ବର୍ତ୍ତମାନ କିଛି କଷ୍ଟକର ସମୟ ଦେଇ ଯାଉଛନ୍ତି। ଆପଣଙ୍କ ଭାବନାଗୁଡ଼ିକ ଗୁରୁତ୍ୱପୂର୍ଣ୍ଣ, ଏବଂ ଆପଣ ସହାୟତା ପାଇଁ ଯୋଗ୍ୟ। ଆପଣଙ୍କ ଦିନର ସବୁଠାରୁ କଷ୍ଟକର ଅଂଶ ବିଷୟରେ କଥା କହିବା କି ସହାୟକ ହେବ?\"\n    ],\n    'ne': [\n      \"म तपाईंको कुरा सुनिरहेको छु, र म चाहन्छु कि तपाईंलाई थाहा होस् कि तपाईंका भावनाहरू पूर्ण रूपमा वैध छन्। कहिलेकाहीं हाम्रो दिमागमा के छ त्यसको बारेमा कुरा गर्नुले हामीलाई कुराहरूलाई राम्रोसँग बुझ्न मद्दत गर्न सक्छ। तपाईंलाई के कुराले सताइरहेको छ त्यसको बारेमा तपाईं मलाई थप भन्न सक्नुहुन्छ?\",\n      \"यो मसँग साझा गर्नुभएकोमा धन्यवाद। मद्दत माग्न साहस चाहिन्छ, र तपाईं यहाँ हुनुहुन्छ भनेर म खुसी छु। तपाईंले अनुभव गरिरहनुभएको कुरा साँच्चै चुनौतीपूर्ण देखिन्छ। तपाईंलाई कति दिनदेखि यस्तो लागिरहेको छ?\",\n      \"म महसुस गर्न सक्छु कि तपाईं अहिले केही कठिन समयबाट गुज्रिरहनुभएको छ। तपाईंका भावनाहरू महत्त्वपूर्ण छन्, र तपाईं समर्थनको लागि योग्य हुनुहुन्छ। तपाईंको दिनको सबैभन्दा कठिन भागको बारेमा कुरा गर्नु सहयोगी हुनेछ?\"\n    ],\n    'sa': [\n      \"अहं भवतः वाणीं शृणोमि, भवतः भावाः पूर्णतया वैधाः इति अहं जानामि इच्छामि। कदाचित् अस्माकं मनसि यत् वर्तते तस्य विषये कथनं अस्मान् विषयान् उत्तमरूपेण अवगन्तुं साहाय्यं करोति। किं भवन्तं कष्टयति तस्य विषये भवान् मह्यं अधिकं कथयितुं शक्नोति किम्?\",\n      \"एतत् मया सह साझीकरणस्य धन्यवादाः। साहाय्यस्य याचना साहसस्य आवश्यकता, भवान् अत्र अस्ति इति अहं हर्षितः। भवान् यत् अनुभवति तत् वास्तवेन चुनौतीपूर्णं दृश्यते। भवान् कति दिनेभ्यः एवम् अनुभवति?\",\n      \"अहं अनुभवितुं शक्नोमि यत् भवान् इदानीं किञ्चित् कठिनकालं गच्छति। भवतः भावाः महत्त्वपूर्णाः सन्ति, भवान् समर्थनार्हः अस्ति। भवतः दिनस्य अतिकठिनभागस्य विषये कथनं किं सहायकं भविष्यति?\"\n    ],\n    'kok': [\n      \"हांव तुमची उतरां ऐकतां, आनी म्हजें मन ज्ञात जावपाक जाय की तुमच्यो भावना पुराय वैध आसात। कांय वेळा आमच्या मनांत जें आसा ताच्या विशीं उलयत करप आमकां वस्तू बरय तरेन उप्नपाक आदार करूं येता। तुमकां काय त्रास दिता ताच्या विशीं तुम म्हाका चड सांगूं येता का?\",\n      \"हें म्हजे वांगडा वांटप केल्याक देव बरें करूम। आदार मागप्याक धीर जाय, आनी तुम हांगा आसात म्हणून म्हाका खूश। तुम जाचो अणभव करतात तो खरें उभार दिवपी दिसता। तुमकां अशें कितल्यो दिसांच्यान लागतां?\",\n      \"म्हाका लागता की तुम आत्तां कांय कश्टाच्यो वेळार पावतात। तुमच्यो भावना म्हत्वाच्यो आसात, आनी तुम आदाराक लायक आसात। तुमच्या दिसाच्या चड कश्टाच्या वांट्याविशीं उलयप काय उप्कारी जाता?\"\n    ],\n    'mai': [\n      \"हम अहाँक बात सुनि रहल छी, आ हम चाहैत छी जे अहाँ जानि जाव जे अहाँक भावना पूरा तरहें वैध अछि। कहियो कहियो हमर मोनमे जे अछि ओकर बारेमे गप्प करब हमरा चीजकेँ बेसी नीक जकाँ बुझबामे मदद कऽ सकैत अछि। अहाँकेँ की चीज परेशान कऽ रहल अछि, ओकर बारेमे अहाँ हमरा आर कहि सकैत छी की?\",\n      \"एकरा हमरा संग बाँटबाक लेल धन्यवाद। मदद मांगबाक लेल साहसक जरूरत होइत छैक, आ अहाँ एतय छी से हम खुश छी। अहाँ जाहि चीजक अनुभव कऽ रहल छी से वास्तवमे चुनौतीपूर्ण लागि रहल अछि। अहाँकेँ कतेक दिनसऽ एहन लागि रहल अछि?\",\n      \"हम महसूस कऽ सकैत छी जे अहाँ आब किछु कठिन समयसऽ गुजरि रहल छी। अहाँक भावना महत्वपूर्ण अछि, आ अहाँ समर्थनक हकदार छी। अहाँक दिनक सभसऽ कठिन हिस्साक बारेमे गप्प करब की सहायक हेतै?\"\n    ],\n    'ks': [\n      \"بہ چھُس توہیک گلہ بُزان، تہ بہ یژھان چھُس ذِ تُہُند احساسات مکمل طور پر درُست چھِ۔ کینہہ وختہ اسہِ دماغس منز یُس کینچھ چھُ تتہِ متعلق گل کرُن ہیکِ اسہِ چیزن بہتر طریقہ سیتھ سمجھنس منز مدد کرتھ۔ تُہُنز کیا چیز پریشان کران چھِ تتہِ متعلق تُہہِ ہیکو میہ زیادہ ونتھ؟\",\n      \"یہ میونہ سیتھ شیئر کرنہِ باپت شکریہ۔ مدد منگنہ خاطرہ حوصلہ ضروری چھُ، تہ بہ خوش چھُس ذِ تُہہِ یتہ چھیو۔ یُس چیز تُہہِ تجربہ کران چھیو سہ واقعی مشکل نظر یوان چھُ۔ تُہُنز کتہ دوہن پیٹھہ یہ محسوس گچھان چھا؟\",\n      \"بہ محسوس کرتھ ہیکان چھُس ذِ تُہہِ وُنہ کینہہ مشکل وختس منز پیوان چھیو۔ تُہُند احساسات اہم چھِ، تہ تُہہِ سپورٹک حقدار چھیو۔ کیا تُہُنز دوہک سبہِ کھوتہ مشکل حصہ کہ متعلق گل کرُن مدد گار ہیکِ آسہِ؟\"\n    ],\n    'sd': [\n      \"مان توهان جي ڳالهه ٻڌي رهيو آهيان، ۽ مان چاهيان ٿو ته توهان ڄاڻو ته توهان جا احساسات مڪمل طور تي صحيح آهن۔ ڪڏهن ڪڏهن اسان جي دماغ ۾ جيڪو ڪجهه آهي تنهن بابت ڳالهائڻ اسان کي شين کي بهتر طريقي سان سمجهڻ ۾ مدد ڪري سگهي ٿو۔ توهان کي ڪهڙي ڳالهه پريشان ڪري رهي آهي تنهن بابت توهان مون کي وڌيڪ ٻڌائي سگهو ٿا؟\",\n      \"هن کي منهنجي سان شيئر ڪرڻ جي لاءِ مهرباني۔ مدد گهرڻ جي لاءِ همت جي ضرورت آهي، ۽ مان خوش آهيان ته توهان هتي آهيو۔ توهان جيڪو تجربو ڪري رهيا آهيو اهو واقعي مشڪل لڳي رهيو آهي۔ توهان کي ڪيترا ڏينهن کان ائين لڳي رهيو آهي؟\",\n      \"مان محسوس ڪري سگهان ٿو ته توهان هن وقت ڪجهه ڏکيا وقتن مان گذري رهيا آهيو۔ توهان جا احساسات اهم آهن، ۽ توهان مدد جا حقدار آهيو۔ ڇا توهان جي ڏينهن جي سڀ کان ڏکي حصي بابت ڳالهائڻ مددگار ٿيندو؟\"\n    ],\n    'mni': [\n      \"ꯑꯩꯅꯥ ꯅꯍꯥꯛꯀꯤ ꯋꯥꯍꯩ ꯇꯥꯔꯤ، ꯑꯃꯁꯨꯡ ꯑꯩꯅꯥ ꯄꯥꯝꯃꯤ ꯃꯗꯨꯗꯤ ꯅꯍꯥꯛꯅꯥ ꯈꯪꯒꯗꯕꯅꯤ ꯃꯗꯨꯗꯤ ꯅꯍꯥꯛꯀꯤ ꯐꯤꯚꯝ ꯄꯨꯝꯅꯃꯛ ꯃꯄꯨꯡ ꯐꯥꯅꯥ ꯆꯨꯝꯃꯤ। ꯈꯔꯥ ꯃꯇꯃꯗꯥ ꯑꯩꯈꯣꯌꯒꯤ ꯋꯥꯈꯂꯗꯥ ꯂꯩꯔꯤꯕꯥ ꯃꯆꯥꯛ ꯁꯤꯡꯒꯤ ꯃꯇꯥꯡꯗꯥ ꯋꯥꯔꯤ ꯁꯥꯅꯕꯅꯥ ꯑꯩꯈꯣꯌꯕꯨ ꯄꯣꯠꯁꯀꯁꯤꯡ ꯍꯦꯟꯅꯥ ꯐꯕꯥ ꯃꯑꯣꯡꯗꯥ ꯈꯉꯕꯗꯥ ꯃꯇꯦꯡ ꯄꯥꯡꯒꯅꯤ। ꯅꯍꯥꯛꯀꯤ ꯋꯥꯅꯥ ꯁꯣꯀꯍꯅꯔꯤꯕꯥ ꯃꯆꯥꯛ ꯁꯤꯡꯒꯤ ꯃꯇꯥꯡꯗꯥ ꯅꯍꯥꯛꯅꯥ ꯑꯩꯉꯣꯟꯗꯥ ꯍꯦꯟꯅꯥ ꯍꯥꯌꯕꯥ ꯌꯥꯒꯗ꯭ꯔꯥ?\",\n      \"ꯃꯁꯤ ꯑꯩꯒꯥ ꯂꯣꯌꯅꯅꯥ ꯁꯦꯌꯔ ꯇꯧꯔꯕꯒꯤꯗꯃꯛ ꯊꯥꯒꯠꯆꯔꯤ। ꯃꯇꯦꯡ ꯍꯪꯂꯤꯕꯒꯤꯗꯃꯛ ꯊꯧꯅꯥ ꯃꯊꯧ ꯇꯥꯏ, ꯑꯃꯁꯨꯡ ꯅꯍꯥꯛ ꯃꯐꯃꯁꯤꯗꯥ ꯂꯩꯔꯤꯕꯅꯥ ꯑꯩ ꯅꯨꯡꯉꯥꯏꯕꯥ ꯐꯥꯑꯣꯏ। ꯅꯍꯥꯛꯅꯥ ꯊꯣꯀꯄꯥ ꯋꯥꯐꯝ ꯑꯁꯤ ꯇꯁꯦꯡꯅꯥ ꯑꯔꯨꯕꯥ ꯃꯇꯝ ꯑꯣꯏꯅꯥ ꯎꯔꯤ। ꯅꯍꯥꯛꯅꯥ ꯀꯌꯥ ꯅꯨꯃꯤꯗꯥꯡꯒꯤ ꯃꯁꯤꯒꯨꯝꯅꯥ ꯐꯥꯑꯣꯔꯤꯕꯅꯣ?\",\n      \"ꯅꯍꯥꯛ ꯍꯧꯖꯤꯛ ꯈꯔꯥ ꯑꯔꯨꯕꯥ ꯃꯇꯃꯗꯥ ꯂꯩꯔꯤ ꯍꯥꯌꯕꯁꯤ ꯑꯩꯅꯥ ꯈꯉꯕꯥ ꯉꯝꯃꯤ। ꯅꯍꯥꯛꯀꯤ ꯐꯤꯚꯝ ꯃꯔꯨꯑꯣꯏ, ꯑꯃꯁꯨꯡ ꯅꯍꯥꯛ ꯃꯇꯦꯡ ꯄꯥꯡꯕꯒꯤ ꯍꯛ ꯂꯩ। ꯅꯍꯥꯛꯀꯤ ꯅꯨꯃꯤꯗꯥꯡꯒꯤ ꯈ꯭ꯕꯥꯏꯗꯒꯤ ꯑꯔꯨꯕꯥ ꯁꯔꯨꯛ ꯑꯗꯨꯒꯤ ꯃꯇꯥꯡꯗꯥ ꯋꯥꯔꯤ ꯁꯥꯅꯕꯥ ꯑꯁꯤ ꯃꯇꯦꯡ ꯄꯥꯡꯒꯅꯤ ꯅꯠꯔꯥ?\"\n    ],\n    'brx': [\n      \"आं नों गाब्लाया नुनो आन, अरो आं सानै ज़ाना नोंखै लागाछ ना नों हाब्रिमु आनफ्राय मानफुर। खेन्तैमा खेन्तैमा नों हानसेलाइनि फ़ुरनो अरथाय नागारजो आं लुबैमु बारै नागारना नुनुगु जायो हागो। नोंखै मा मानसिनो जायै जानाय आं खै हागियै गुनुनो हागाल गलाम?\",\n      \"बे आं लगुनि शेयार जानायनि थुनलाइ। मदद बिजिरनाय फुइसा मानांछ, अरो नोंनि बेमा दोंमोनो बाब आं रांगाछ। नोंनि बान्दुनो फोरजानै बारै चार्ण बारै गेनांग लागाछ। नों कलाय नुमित्सा बे सानछे नुनो ला?\",\n      \"नोंनि नैजो खेन्ते आंनि मानसि फोराव मुनायछे बायै आं निदिन जानो हागो। नों हाब्रिमु लागदो सान, अरो नों आरो फोरजानै जायो मानांछ। नों नुमितस गुफै गदै गाननो हानसे फ़ुरनो मानलागा दांछ गुदुन सायो हागालि गाम?\"\n    ],\n    'sat': [\n      \"ᱤᱧ ᱟᱢᱟᱜ ᱠᱟᱛᱷᱟ ᱟᱧᱡᱚᱢᱮᱫ ᱠᱟᱱᱟ, ᱟᱨ ᱤᱧ ᱠᱩᱥᱤᱭᱟᱜ ᱢᱮ ᱟᱢ ᱵᱟᱰᱟᱭ ᱢᱮ ᱡᱮ ᱟᱢᱟᱜ ᱵᱷᱟᱵᱽᱱᱟᱠᱚ ᱯᱩᱨᱟᱹᱣ ᱵᱟᱝᱛᱮ ᱵᱟᱰᱟᱭᱚᱜ ᱠᱟᱱᱟ ᱾ ᱛᱤᱱᱟᱹᱜ ᱡᱚᱦᱚᱜ ᱟᱞᱮᱭᱟᱜ ᱢᱚᱱᱮ ᱨᱮ ᱡᱟᱦᱟᱸ ᱢᱮᱱᱟᱜ-ᱟ ᱚᱱᱟ ᱞᱟᱹᱜᱤᱫ ᱨᱚᱲ ᱨᱟᱹᱲ ᱫᱮ ᱟᱞᱮ ᱤᱫᱤ ᱠᱟᱛᱮ ᱞᱮᱠᱷᱟᱭ ᱢᱚᱡᱽ ᱯᱟᱴᱦᱷᱟᱣ ᱨᱮ ᱜᱚᱲᱚ ᱮᱢᱟᱠ ᱫᱟᱲᱮᱭᱟᱜ-ᱟ ᱾ ᱟᱢᱟᱜ ᱡᱟᱦᱟᱸ ᱠᱩᱴᱷᱤᱧ ᱤᱡ ᱮᱢᱟ ᱚᱱᱟ ᱞᱟᱹᱜᱤᱫ ᱟᱢ ᱤᱧ ᱮ ᱵᱮᱥ ᱞᱮᱠᱷᱟ ᱞᱟᱹᱭ ᱫᱟᱲᱮᱭᱟᱜ-ᱟᱢ?\",\n      \"ᱱᱚᱶᱟ ᱤᱧ ᱥᱟᱝ ᱦᱟᱹᱴᱤᱧ ᱟᱢᱟᱜ ᱥᱩᱠᱨᱤᱭᱟᱹ ᱾ ᱜᱚᱲᱚ ᱮᱢ ᱞᱟᱹᱜᱤᱫ ᱢᱟᱦᱟᱸ ᱫᱚᱨᱠᱟᱨ ᱠᱟᱱᱟ, ᱟᱨ ᱟᱢ ᱱᱚᱸᱰᱮ ᱢᱮᱱᱟᱢ ᱚᱱᱟ ᱧᱮᱞ ᱠᱟᱛᱮ ᱤᱧ ᱟᱹᱰᱤ ᱨᱟᱹᱥᱠᱟᱹᱭ ᱾ ᱟᱢ ᱡᱟᱦᱟᱸ ᱚᱵᱷᱚ ᱟᱢᱟᱜ ᱚᱱᱟ ᱫᱚ ᱥᱟᱹᱨᱤ ᱠᱟᱛᱮ ᱟᱹᱰᱤ ᱠᱷᱟᱴᱟᱣ ᱜᱮ ᱧᱮᱞᱚᱜ ᱠᱟᱱᱟ ᱾ ᱟᱢ ᱫᱚ ᱚᱠᱟ ᱪᱟᱸᱫᱚ ᱠᱷᱚᱱ ᱱᱚᱝᱠᱟ ᱨᱮᱜᱮ ᱟᱭᱢᱟ ᱢᱟᱢ?\",\n      \"ᱤᱧ ᱵᱚᱸᱪᱟᱣ ᱫᱟᱲᱮᱭᱟᱜ-ᱟᱧ ᱡᱮ ᱟᱢ ᱱᱤᱛᱚᱜ ᱡᱟᱦᱟᱸ ᱫᱟᱠᱟ ᱚᱠᱛᱚ ᱨᱮ ᱫᱟᱞᱟᱱ ᱞᱮᱱᱟᱢ ᱾ ᱟᱢᱟᱜ ᱵᱷᱟᱵᱽᱱᱟᱠᱚ ᱫᱚ ᱞᱟᱹᱠᱛᱤᱭᱟᱱ ᱠᱟᱱᱟ, ᱟᱨ ᱟᱢ ᱜᱚᱲᱚ ᱮᱢ ᱞᱟᱹᱜᱤᱫ ᱫᱟᱦ ᱢᱮᱱᱟᱜ ᱢᱟ ᱾ ᱟᱢᱟᱜ ᱢᱟᱦᱟᱸ ᱨᱮᱱᱟᱜ ᱡᱚᱛᱚ ᱠᱷᱚᱱ ᱠᱷᱟᱴᱟᱣ ᱦᱤᱸᱥ ᱞᱟᱹᱜᱤᱫ ᱜᱟᱞᱚᱪ ᱞᱮᱱ ᱫᱚ ᱜᱚᱲᱚ ᱮᱢ ᱜᱚᱢᱠᱮ ᱛᱟᱦᱮᱱᱟ?\"\n    ],\n    'doi': [\n      \"मैं तुंदी गल्ल सुनी दा, अते मैं चांह्दा इयां जे तुस जाणी जाओ जे तुंदे एहसास बिल्कुल सहै न। कदें कदें असां दे दिमागे च जेह्ड़ा कुछ होंदा उंदे बारे च गल्ल करना असां गी चीज्जां बेहतर तरीके नाल समझने च मदद करी सकदा। तुसां गी कै चीज तकलीफ देई दी ओस दे बारे च तुस मिगी होर दस्सी सकदे ओ?\",\n      \"एह्दा मेरे नाल साझा करने दा शुक्रिया। मदद मंगने आस्ते हिम्मत चैयदी, अते मैं खुश इयां जे तुस इत्थें ओ। तुस जेह्दा अनुभव करदे ओ सेह सच्ची च चुनौतीपूर्ण लगदा। तुसां गी कित्ते दिनां तों एह्जा लगी दा?\",\n      \"मैं महसूस करी सकदा इयां जे तुस हुण किछ मुश्किल बखत दा सामना करदे ओ। तुंदे एहसास जरूरी न, अते तुस सहायता दे हकदार ओ। तुंदे दिने दे सबतों मुश्किल हिस्से दे बारे च गल्ल करना मददगार होग्गा?\"\n    ]\n  };\n\n  const responses = fallbackResponses[language] || fallbackResponses['en'];\n  return responses[Math.floor(Math.random() * responses.length)];\n}","size_bytes":49408},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { aiRequestSchema, messageSchema } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { generateAIResponse } from \"./aiService\";\n\n// Enhanced language detection using character patterns and common words\nasync function detectLanguage(text: string): Promise<string> {\n  try {\n    const cleanText = text.toLowerCase().trim();\n    \n    // Character-based detection for non-Latin scripts\n    if (/[\\u4e00-\\u9fff]/.test(text)) return 'zh';\n    if (/[\\u0600-\\u06ff]/.test(text)) return 'ar';\n    if (/[\\u0400-\\u04ff]/.test(text)) return 'ru';\n    if (/[\\u3040-\\u309f\\u30a0-\\u30ff]/.test(text)) return 'ja';\n    if (/[\\uac00-\\ud7af]/.test(text)) return 'ko';\n    if (/[\\u0e00-\\u0e7f]/.test(text)) return 'th';\n    \n    // Indian languages detection (22 official languages)\n    if (/[\\u0900-\\u097f]/.test(text)) return 'hi'; // Devanagari (Hindi, Sanskrit, Marathi, Nepali)\n    if (/[\\u0980-\\u09ff]/.test(text)) return 'bn'; // Bengali (also Assamese)\n    if (/[\\u0a00-\\u0a7f]/.test(text)) return 'pa'; // Punjabi\n    if (/[\\u0a80-\\u0aff]/.test(text)) return 'gu'; // Gujarati\n    if (/[\\u0b00-\\u0b7f]/.test(text)) return 'or'; // Odia\n    if (/[\\u0b80-\\u0bff]/.test(text)) return 'ta'; // Tamil\n    if (/[\\u0c00-\\u0c7f]/.test(text)) return 'te'; // Telugu\n    if (/[\\u0c80-\\u0cff]/.test(text)) return 'kn'; // Kannada\n    if (/[\\u0d00-\\u0d7f]/.test(text)) return 'ml'; // Malayalam\n    if (/[\\u1c50-\\u1c7f]/.test(text)) return 'sat'; // Santali\n    if (/[\\uabc0-\\uabff]/.test(text)) return 'mni'; // Meitei (Manipuri)\n    \n    // Check for common words to differentiate similar scripts\n    const text_lower = cleanText;\n    \n    // Assamese vs Bengali distinction\n    if (/[\\u0980-\\u09ff]/.test(text) && /\\b(মই|আমি|তুমি|আপুনি)\\b/.test(text_lower)) return 'as';\n    if (/[\\u0980-\\u09ff]/.test(text) && /\\b(আমি|তুমি|তোমার|আমার)\\b/.test(text_lower)) return 'bn';\n    \n    // Sanskrit vs Hindi distinction\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(अहम्|त्वम्|एतत्|तत्|किम्)\\b/.test(text_lower)) return 'sa';\n    \n    // Marathi vs Hindi distinction\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(मी|तू|तुम्ही|आम्ही|माझा|तुझा)\\b/.test(text_lower)) return 'mr';\n    \n    // Nepali vs Hindi distinction\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(म|तिमी|तपाईं|हामी|मेरो|तिम्रो)\\b/.test(text_lower)) return 'ne';\n    \n    // Konkani (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(हांव|तूं|आमी|तुमी)\\b/.test(text_lower)) return 'kok';\n    \n    // Maithili (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(हम|अहाँ|तोहर|हमर)\\b/.test(text_lower)) return 'mai';\n    \n    // Urdu (uses Arabic script but may have some Devanagari)\n    if (/[\\u0600-\\u06ff]/.test(text) && /\\b(میں|تم|آپ|ہم)\\b/.test(text_lower)) return 'ur';\n    \n    // Kashmiri (uses both Arabic and Devanagari)\n    if (/[\\u0600-\\u06ff\\u0900-\\u097f]/.test(text) && /\\b(بہ|تہ|یہ|اسہ)\\b/.test(text_lower)) return 'ks';\n    \n    // Sindhi (uses both Arabic and Devanagari)\n    if (/[\\u0600-\\u06ff\\u0900-\\u097f]/.test(text) && /\\b(مان|توهان|هي|اهو)\\b/.test(text_lower)) return 'sd';\n    \n    // Bodo (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(आं|नों|बे|सिन)\\b/.test(text_lower)) return 'brx';\n    \n    // Dogri (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(मैं|तुसां|असां|तुंदा)\\b/.test(text_lower)) return 'doi';\n    \n    // European language detection with more comprehensive patterns\n    // Spanish\n    if (/\\b(soy|estoy|tengo|quiero|necesito|me|mi|tu|su|el|la|los|las|de|que|en|es|y|a|por|para|con|se|del|al|muy|más|pero|como|cuando|donde|hola|adiós|gracias|por favor)\\b/.test(cleanText)) return 'es';\n    \n    // French  \n    if (/\\b(je|tu|il|elle|nous|vous|ils|elles|suis|es|est|sommes|êtes|sont|ai|as|a|avons|avez|ont|le|la|les|de|du|des|et|en|pour|avec|ce|cette|ces|bonjour|merci|s'il vous plaît)\\b/.test(cleanText)) return 'fr';\n    \n    // German\n    if (/\\b(ich|du|er|sie|es|wir|ihr|bin|bist|ist|sind|seid|haben|habe|hast|hat|habt|der|die|das|und|in|zu|mit|auf|für|von|dem|den|aber|wenn|wie|wo|hallo|danke|bitte)\\b/.test(cleanText)) return 'de';\n    \n    // Italian\n    if (/\\b(io|tu|lui|lei|noi|voi|loro|sono|sei|è|siamo|siete|ho|hai|ha|abbiamo|avete|hanno|il|la|lo|gli|le|di|che|e|in|per|con|del|della|ma|se|come|dove|ciao|grazie|prego)\\b/.test(cleanText)) return 'it';\n    \n    // Portuguese\n    if (/\\b(eu|tu|você|ele|ela|nós|vocês|eles|elas|sou|és|é|somos|são|tenho|tens|tem|temos|têm|o|a|os|as|de|que|e|em|para|com|do|da|dos|das|mas|se|como|onde|olá|obrigado|por favor)\\b/.test(cleanText)) return 'pt';\n    \n    // Dutch\n    if (/\\b(ik|jij|hij|zij|wij|jullie|ben|bent|is|zijn|heb|hebt|heeft|hebben|de|het|een|en|in|op|van|voor|met|maar|als|wat|waar|hallo|dank|alsjeblieft)\\b/.test(cleanText)) return 'nl';\n    \n    // Default to English\n    return 'en';\n  } catch (error) {\n    return 'en';\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Create new chat session\n  app.post(\"/api/chat/session\", async (req, res) => {\n    try {\n      const session = await storage.createSession();\n      res.json({ sessionId: session.id });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create chat session\" });\n    }\n  });\n\n  // Send message and get AI response\n  app.post(\"/api/chat/message\", async (req, res) => {\n    try {\n      const { message, sessionId, language } = aiRequestSchema.parse(req.body);\n      \n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n\n      // Detect language if not provided\n      const detectedLanguage = language || await detectLanguage(message);\n      \n      // Add user message\n      const userMessage = {\n        id: randomUUID(),\n        content: message,\n        isUser: true,\n        timestamp: new Date(),\n        language: detectedLanguage\n      };\n      \n      await storage.addMessage(sessionId, userMessage);\n      await storage.updateSessionLanguage(sessionId, detectedLanguage);\n\n      // Generate AI response\n      const aiResponse = await generateAIResponse(message, detectedLanguage);\n      \n      // Add AI message\n      const aiMessage = {\n        id: randomUUID(),\n        content: aiResponse,\n        isUser: false,\n        timestamp: new Date(),\n        language: detectedLanguage\n      };\n      \n      await storage.addMessage(sessionId, aiMessage);\n\n      res.json({\n        response: aiResponse,\n        detectedLanguage,\n        sessionId\n      });\n\n    } catch (error) {\n      console.error('Chat error:', error);\n      res.status(500).json({ error: \"Failed to process message\" });\n    }\n  });\n\n  // Get chat history\n  app.get(\"/api/chat/session/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await storage.getSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to retrieve session\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7613},"server/storage.ts":{"content":"import { type ChatSession, type Message } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  createSession(): Promise<ChatSession>;\n  getSession(id: string): Promise<ChatSession | undefined>;\n  addMessage(sessionId: string, message: Message): Promise<void>;\n  updateSessionLanguage(sessionId: string, language: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private sessions: Map<string, ChatSession>;\n\n  constructor() {\n    this.sessions = new Map();\n    \n    // Clean up old sessions every hour (to prevent memory leaks)\n    setInterval(() => {\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      Array.from(this.sessions.entries()).forEach(([id, session]) => {\n        if (session.createdAt < oneHourAgo) {\n          this.sessions.delete(id);\n        }\n      });\n    }, 60 * 60 * 1000);\n  }\n\n  async createSession(): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = {\n      id,\n      messages: [],\n      createdAt: new Date(),\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async getSession(id: string): Promise<ChatSession | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async addMessage(sessionId: string, message: Message): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (session) {\n      session.messages.push(message);\n    }\n  }\n\n  async updateSessionLanguage(sessionId: string, language: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (session) {\n      session.detectedLanguage = language;\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1667},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\nexport const messageSchema = z.object({\n  id: z.string(),\n  content: z.string(),\n  isUser: z.boolean(),\n  timestamp: z.date(),\n  language: z.string().optional(),\n});\n\nexport const chatSessionSchema = z.object({\n  id: z.string(),\n  messages: z.array(messageSchema),\n  detectedLanguage: z.string().optional(),\n  createdAt: z.date(),\n});\n\nexport const aiRequestSchema = z.object({\n  message: z.string(),\n  language: z.string().optional(),\n  sessionId: z.string(),\n});\n\nexport const aiResponseSchema = z.object({\n  response: z.string(),\n  detectedLanguage: z.string().optional(),\n  sessionId: z.string(),\n});\n\nexport type Message = z.infer<typeof messageSchema>;\nexport type ChatSession = z.infer<typeof chatSessionSchema>;\nexport type AiRequest = z.infer<typeof aiRequestSchema>;\nexport type AiResponse = z.infer<typeof aiResponseSchema>;\n","size_bytes":862},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Chat from \"@/pages/chat\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Chat} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(259, 94%, 51%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* SupportGPT Custom Colors */\n  --support-primary: hsl(259, 94%, 51%);\n  --support-secondary: hsl(158, 64%, 52%);\n  --support-accent: hsl(45, 93%, 47%);\n  --support-neutral: hsl(210, 40%, 98%);\n  --support-text: hsl(215, 25%, 47%);\n  --support-crisis: hsl(0, 84%, 60%);\n  --support-online: hsl(142, 71%, 45%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(259, 94%, 51%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .chat-container {\n    height: calc(100vh - 200px);\n    min-height: 400px;\n  }\n  \n  .message-bubble {\n    animation: fadeInUp 0.3s ease-out;\n  }\n  \n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  .typing-indicator {\n    display: none;\n  }\n  \n  .typing-indicator.active {\n    display: flex;\n    animation: pulse 1.5s infinite;\n  }\n  \n  .crisis-alert {\n    background: linear-gradient(135deg, hsl(0, 84%, 60%) 0%, hsl(0, 72%, 51%) 100%);\n  }\n  \n  .support-gradient {\n    background: linear-gradient(135deg, hsl(259, 94%, 51%) 0%, hsl(250, 95%, 62%) 100%);\n  }\n\n  .bg-support-primary {\n    background-color: var(--support-primary);\n  }\n\n  .text-support-primary {\n    color: var(--support-primary);\n  }\n\n  .bg-support-secondary {\n    background-color: var(--support-secondary);\n  }\n\n  .text-support-secondary {\n    color: var(--support-secondary);\n  }\n\n  .bg-support-accent {\n    background-color: var(--support-accent);\n  }\n\n  .text-support-accent {\n    color: var(--support-accent);\n  }\n\n  .bg-support-neutral {\n    background-color: var(--support-neutral);\n  }\n\n  .text-support-text {\n    color: var(--support-text);\n  }\n\n  .text-support-crisis {\n    color: var(--support-crisis);\n  }\n\n  .text-support-online {\n    color: var(--support-online);\n  }\n\n  .bg-support-online\\/10 {\n    background-color: hsl(142, 71%, 45%, 0.1);\n  }\n\n  .bg-support-secondary\\/10 {\n    background-color: hsl(158, 64%, 52%, 0.1);\n  }\n}\n","size_bytes":3550},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useChat.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { aiService } from '@/lib/aiService';\nimport { detectTextLanguage, detectBrowserLanguage } from '@/lib/languageDetection';\nimport type { Message } from '@shared/schema';\n\nexport function useChat() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [detectedLanguage, setDetectedLanguage] = useState<string>(detectBrowserLanguage());\n  const [sessionInitialized, setSessionInitialized] = useState(false);\n\n  // Initialize session\n  useEffect(() => {\n    const initSession = async () => {\n      try {\n        await aiService.createSession();\n        setSessionInitialized(true);\n        \n        // Add welcome message\n        const welcomeMessage: Message = {\n          id: 'welcome',\n          content: \"Hi there! 👋 I'm SupportGPT, and I'm here to listen and support you 24/7. I'll automatically detect your language and respond in the same language. You're completely anonymous here - no registration needed. How are you feeling today?\",\n          isUser: false,\n          timestamp: new Date(),\n          language: 'en'\n        };\n        setMessages([welcomeMessage]);\n      } catch (error) {\n        console.error('Failed to initialize chat session:', error);\n      }\n    };\n\n    initSession();\n  }, []);\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageText: string) => {\n      const userLanguage = detectTextLanguage(messageText);\n      setDetectedLanguage(userLanguage);\n      \n      const userMessage: Message = {\n        id: Date.now().toString(),\n        content: messageText,\n        isUser: true,\n        timestamp: new Date(),\n        language: userLanguage\n      };\n\n      setMessages(prev => [...prev, userMessage]);\n      setIsTyping(true);\n\n      const response = await aiService.sendMessage(messageText, userLanguage);\n      \n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: response.response,\n        isUser: false,\n        timestamp: new Date(),\n        language: response.detectedLanguage || userLanguage\n      };\n\n      return aiMessage;\n    },\n    onSuccess: (aiMessage) => {\n      setMessages(prev => [...prev, aiMessage]);\n      setIsTyping(false);\n    },\n    onError: (error) => {\n      console.error('Failed to send message:', error);\n      setIsTyping(false);\n      \n      // Add error message\n      const errorMessage: Message = {\n        id: (Date.now() + 2).toString(),\n        content: \"I'm sorry, I'm having trouble responding right now. Please try again in a moment. If you're in crisis, please reach out to a crisis helpline immediately.\",\n        isUser: false,\n        timestamp: new Date(),\n        language: detectedLanguage\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  });\n\n  const sendMessage = useCallback((messageText: string) => {\n    if (messageText.trim() && sessionInitialized) {\n      sendMessageMutation.mutate(messageText.trim());\n    }\n  }, [sendMessageMutation, sessionInitialized]);\n\n  return {\n    messages,\n    sendMessage,\n    isTyping,\n    detectedLanguage,\n    isLoading: sendMessageMutation.isPending,\n    sessionInitialized\n  };\n}\n","size_bytes":3312},"client/src/lib/aiService.ts":{"content":"import { apiRequest } from './queryClient';\nimport type { AiRequest, AiResponse } from '@shared/schema';\n\nexport class AIService {\n  private sessionId: string | null = null;\n\n  async createSession(): Promise<string> {\n    const response = await apiRequest('POST', '/api/chat/session');\n    const data = await response.json();\n    this.sessionId = data.sessionId;\n    return this.sessionId!;\n  }\n\n  async sendMessage(message: string, language?: string): Promise<AiResponse> {\n    if (!this.sessionId) {\n      await this.createSession();\n    }\n\n    const request: AiRequest = {\n      message,\n      language,\n      sessionId: this.sessionId!\n    };\n\n    const response = await apiRequest('POST', '/api/chat/message', request);\n    return await response.json();\n  }\n\n  async getSession(): Promise<any> {\n    if (!this.sessionId) return null;\n    \n    const response = await apiRequest('GET', `/api/chat/session/${this.sessionId}`);\n    return await response.json();\n  }\n\n  getSessionId(): string | null {\n    return this.sessionId;\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":1078},"client/src/lib/languageDetection.ts":{"content":"// Simple client-side language detection utilities\nexport function detectBrowserLanguage(): string {\n  const lang = navigator.language || navigator.languages?.[0] || 'en';\n  return lang.split('-')[0]; // Get just the language code\n}\n\nexport function getLanguageDisplayName(code: string): string {\n  const languages: Record<string, string> = {\n    // International languages\n    'en': 'English',\n    'es': 'Español',\n    'fr': 'Français',\n    'de': 'Deutsch',\n    'it': 'Italiano',\n    'pt': 'Português',\n    'ru': 'Русский',\n    'ja': '日本語',\n    'ko': '한국어',\n    'zh': '中文',\n    'ar': 'العربية',\n    \n    // 22 Official Indian Languages\n    'hi': 'हिन्दी', // Hindi\n    'bn': 'বাংলা', // Bengali\n    'te': 'తెలుగు', // Telugu\n    'mr': 'मराठी', // Marathi\n    'ta': 'தமிழ்', // Tamil\n    'ur': 'اردو', // Urdu\n    'gu': 'ગુજરાતી', // Gujarati\n    'kn': 'ಕನ್ನಡ', // Kannada\n    'ml': 'മലയാളം', // Malayalam\n    'or': 'ଓଡ଼ିଆ', // Odia\n    'pa': 'ਪੰਜਾਬੀ', // Punjabi\n    'as': 'অসমীয়া', // Assamese\n    'mai': 'मैथिली', // Maithili\n    'sa': 'संस्कृतम्', // Sanskrit\n    'ne': 'नेपाली', // Nepali\n    'ks': 'कॉशुर / کٲشُر', // Kashmiri\n    'kok': 'कोंकणी', // Konkani\n    'sd': 'سنڌي / सिन्धी', // Sindhi\n    'mni': 'ꯃꯤꯇꯩ ꯂꯣꯟ', // Meitei (Manipuri)\n    'brx': 'बड़ो', // Bodo\n    'sat': 'ᱥᱟᱱᱛᱟᱲᱤ', // Santali\n    'doi': 'डोगरी' // Dogri\n  };\n  \n  return languages[code] || 'Unknown Language';\n}\n\nexport function detectTextLanguage(text: string): string {\n  try {\n    const cleanText = text.toLowerCase().trim();\n    \n    // Character-based detection for non-Latin scripts\n    if (/[\\u4e00-\\u9fff]/.test(text)) return 'zh';\n    if (/[\\u0600-\\u06ff]/.test(text)) return 'ar';\n    if (/[\\u0400-\\u04ff]/.test(text)) return 'ru';\n    if (/[\\u3040-\\u309f\\u30a0-\\u30ff]/.test(text)) return 'ja';\n    if (/[\\uac00-\\ud7af]/.test(text)) return 'ko';\n    if (/[\\u0e00-\\u0e7f]/.test(text)) return 'th';\n    \n    // Indian languages detection (22 official languages)\n    if (/[\\u0900-\\u097f]/.test(text)) return 'hi'; // Devanagari (Hindi, Sanskrit, Marathi, Nepali)\n    if (/[\\u0980-\\u09ff]/.test(text)) return 'bn'; // Bengali (also Assamese)\n    if (/[\\u0a00-\\u0a7f]/.test(text)) return 'pa'; // Punjabi\n    if (/[\\u0a80-\\u0aff]/.test(text)) return 'gu'; // Gujarati\n    if (/[\\u0b00-\\u0b7f]/.test(text)) return 'or'; // Odia\n    if (/[\\u0b80-\\u0bff]/.test(text)) return 'ta'; // Tamil\n    if (/[\\u0c00-\\u0c7f]/.test(text)) return 'te'; // Telugu\n    if (/[\\u0c80-\\u0cff]/.test(text)) return 'kn'; // Kannada\n    if (/[\\u0d00-\\u0d7f]/.test(text)) return 'ml'; // Malayalam\n    if (/[\\u1c50-\\u1c7f]/.test(text)) return 'sat'; // Santali\n    if (/[\\uabc0-\\uabff]/.test(text)) return 'mni'; // Meitei (Manipuri)\n    \n    // Check for common words to differentiate similar scripts\n    \n    // Assamese vs Bengali distinction\n    if (/[\\u0980-\\u09ff]/.test(text) && /\\b(মই|আমি|তুমি|আপুনি)\\b/.test(cleanText)) return 'as';\n    if (/[\\u0980-\\u09ff]/.test(text) && /\\b(আমি|তুমি|তোমার|আমার)\\b/.test(cleanText)) return 'bn';\n    \n    // Sanskrit vs Hindi distinction\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(अहम्|त्वम्|एतत्|तत्|किम्)\\b/.test(cleanText)) return 'sa';\n    \n    // Marathi vs Hindi distinction\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(मी|तू|तुम्ही|आम्ही|माझा|तुझा)\\b/.test(cleanText)) return 'mr';\n    \n    // Nepali vs Hindi distinction\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(म|तिमी|तपाईं|हामी|मेरो|तिम्रो)\\b/.test(cleanText)) return 'ne';\n    \n    // Konkani (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(हांव|तूं|आमी|तुमी)\\b/.test(cleanText)) return 'kok';\n    \n    // Maithili (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(हम|अहाँ|तोहर|हमर)\\b/.test(cleanText)) return 'mai';\n    \n    // Urdu (uses Arabic script)\n    if (/[\\u0600-\\u06ff]/.test(text) && /\\b(میں|تم|آپ|ہم)\\b/.test(cleanText)) return 'ur';\n    \n    // Kashmiri (uses both Arabic and Devanagari)\n    if (/[\\u0600-\\u06ff\\u0900-\\u097f]/.test(text) && /\\b(بہ|تہ|یہ|اسہ)\\b/.test(cleanText)) return 'ks';\n    \n    // Sindhi (uses both Arabic and Devanagari)\n    if (/[\\u0600-\\u06ff\\u0900-\\u097f]/.test(text) && /\\b(مان|توهان|هي|اهو)\\b/.test(cleanText)) return 'sd';\n    \n    // Bodo (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(आं|नों|बे|सिन)\\b/.test(cleanText)) return 'brx';\n    \n    // Dogri (uses Devanagari)\n    if (/[\\u0900-\\u097f]/.test(text) && /\\b(मैं|तुसां|असां|तुंदा)\\b/.test(cleanText)) return 'doi';\n    \n    // European language detection with comprehensive patterns\n    // Spanish\n    if (/\\b(soy|estoy|tengo|quiero|necesito|me|mi|tu|su|el|la|los|las|de|que|en|es|y|a|por|para|con|se|del|al|muy|más|pero|como|cuando|donde|hola|adiós|gracias|por favor)\\b/.test(cleanText)) return 'es';\n    \n    // French  \n    if (/\\b(je|tu|il|elle|nous|vous|ils|elles|suis|es|est|sommes|êtes|sont|ai|as|a|avons|avez|ont|le|la|les|de|du|des|et|en|pour|avec|ce|cette|ces|bonjour|merci|s'il vous plaît)\\b/.test(cleanText)) return 'fr';\n    \n    // German\n    if (/\\b(ich|du|er|sie|es|wir|ihr|bin|bist|ist|sind|seid|haben|habe|hast|hat|habt|der|die|das|und|in|zu|mit|auf|für|von|dem|den|aber|wenn|wie|wo|hallo|danke|bitte)\\b/.test(cleanText)) return 'de';\n    \n    // Italian\n    if (/\\b(io|tu|lui|lei|noi|voi|loro|sono|sei|è|siamo|siete|ho|hai|ha|abbiamo|avete|hanno|il|la|lo|gli|le|di|che|e|in|per|con|del|della|ma|se|come|dove|ciao|grazie|prego)\\b/.test(cleanText)) return 'it';\n    \n    // Portuguese\n    if (/\\b(eu|tu|você|ele|ela|nós|vocês|eles|elas|sou|és|é|somos|são|tenho|tens|tem|temos|têm|o|a|os|as|de|que|e|em|para|com|do|da|dos|das|mas|se|como|onde|olá|obrigado|por favor)\\b/.test(cleanText)) return 'pt';\n    \n    // Dutch\n    if (/\\b(ik|jij|hij|zij|wij|jullie|ben|bent|is|zijn|heb|hebt|heeft|hebben|de|het|een|en|in|op|van|voor|met|maar|als|wat|waar|hallo|dank|alsjeblieft)\\b/.test(cleanText)) return 'nl';\n    \n    // Default to English\n    return 'en';\n  } catch (error) {\n    return 'en';\n  }\n}\n","size_bytes":6563},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { ChatInterface } from '@/components/chat/ChatInterface';\n\nexport default function Chat() {\n  return <ChatInterface />;\n}\n","size_bytes":129},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/chat/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Send, Globe, UserCheck, AlertTriangle, Heart } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { MessageBubble } from './MessageBubble';\nimport { TypingIndicator } from './TypingIndicator';\nimport { QuickActions } from './QuickActions';\nimport { CrisisModal } from './CrisisModal';\nimport { useChat } from '@/hooks/useChat';\nimport { getLanguageDisplayName } from '@/lib/languageDetection';\n\nexport function ChatInterface() {\n  const [inputValue, setInputValue] = useState('');\n  const [showCrisisModal, setShowCrisisModal] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  const { messages, sendMessage, isTyping, detectedLanguage, isLoading, sessionInitialized } = useChat();\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]);\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + 'px';\n    }\n  }, [inputValue]);\n\n  const handleSend = () => {\n    if (inputValue.trim() && sessionInitialized && !isLoading) {\n      sendMessage(inputValue);\n      setInputValue('');\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleQuickAction = (action: string) => {\n    if (sessionInitialized && !isLoading) {\n      sendMessage(action);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n      {/* Crisis Alert Bar */}\n      <div className=\"crisis-alert text-white py-3 px-4 text-center text-sm font-medium\">\n        <AlertTriangle className=\"inline w-4 h-4 mr-2\" />\n        <span>In crisis? Call 988 (Suicide & Crisis Lifeline) or text HOME to 741741 (Crisis Text Line)</span>\n        <button\n          onClick={() => setShowCrisisModal(true)}\n          className=\"ml-4 underline hover:no-underline\"\n        >\n          More Resources\n        </button>\n      </div>\n\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div className=\"flex items-center space-x-3 mb-4 sm:mb-0\">\n              <div className=\"support-gradient w-12 h-12 rounded-xl flex items-center justify-center text-white\">\n                <Heart className=\"w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">SupportGPT</h1>\n                <p className=\"text-support-text text-sm\">Free 24/7 Mental Health Support</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Language Indicator */}\n              <div className=\"bg-support-secondary/10 text-support-secondary px-3 py-1 rounded-full text-sm font-medium flex items-center\">\n                <Globe className=\"w-4 h-4 mr-2\" />\n                <span>{getLanguageDisplayName(detectedLanguage)} Detected</span>\n              </div>\n              \n              {/* Anonymous Status */}\n              <div className=\"bg-support-online/10 text-support-online px-3 py-1 rounded-full text-sm font-medium flex items-center\">\n                <UserCheck className=\"w-4 h-4 mr-2\" />\n                <span>Anonymous</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Chat Container */}\n      <div className=\"max-w-4xl mx-auto px-4 py-6\">\n        <div className=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n          {/* Chat Messages Area */}\n          <div className=\"chat-container overflow-y-auto p-6 space-y-4\">\n            {messages.map((message) => (\n              <MessageBubble key={message.id} message={message} />\n            ))}\n            \n            <TypingIndicator isVisible={isTyping} />\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Message Input */}\n          <div className=\"border-t border-gray-100 p-4 bg-gray-50\">\n            <div className=\"flex items-end space-x-3\">\n              <div className=\"flex-1\">\n                <Textarea\n                  ref={textareaRef}\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Share what's on your mind... I'm here to listen and support you.\"\n                  className=\"w-full px-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-support-primary focus:border-transparent resize-none text-sm sm:text-base min-h-[48px]\"\n                  rows={1}\n                  disabled={!sessionInitialized || isLoading}\n                />\n              </div>\n              <Button\n                onClick={handleSend}\n                disabled={!inputValue.trim() || !sessionInitialized || isLoading}\n                className=\"support-gradient text-white px-6 py-3 rounded-2xl hover:shadow-lg transition-all duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed h-12\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            {/* Quick Actions */}\n            <QuickActions onActionClick={handleQuickAction} />\n          </div>\n        </div>\n\n        {/* Support Information */}\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-white rounded-xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <UserCheck className=\"w-5 h-5 text-support-secondary\" />\n              <h3 className=\"font-semibold text-gray-900\">Completely Anonymous</h3>\n            </div>\n            <p className=\"text-support-text text-sm\">No registration, no data storage. Your privacy is our priority.</p>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <Heart className=\"w-5 h-5 text-support-accent\" />\n              <h3 className=\"font-semibold text-gray-900\">24/7 Available</h3>\n            </div>\n            <p className=\"text-support-text text-sm\">Get support whenever you need it, day or night.</p>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <Globe className=\"w-5 h-5 text-support-primary\" />\n              <h3 className=\"font-semibold text-gray-900\">Multilingual</h3>\n            </div>\n            <p className=\"text-support-text text-sm\">Communicate in your preferred language automatically.</p>\n          </div>\n        </div>\n\n        {/* Important Disclaimer */}\n        <div className=\"mt-6 bg-amber-50 border border-amber-200 rounded-xl p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertTriangle className=\"w-5 h-5 text-support-accent mt-1 flex-shrink-0\" />\n            <div>\n              <h4 className=\"font-semibold text-amber-800 mb-1\">Important Notice</h4>\n              <p className=\"text-amber-700 text-sm\">\n                SupportGPT provides peer support and is not a replacement for professional mental health services. \n                If you're experiencing a mental health crisis, please contact emergency services or a crisis helpline immediately.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Crisis Resources Modal */}\n      <CrisisModal isOpen={showCrisisModal} onClose={() => setShowCrisisModal(false)} />\n    </div>\n  );\n}\n","size_bytes":8138},"client/src/components/chat/CrisisModal.tsx":{"content":"import { useState } from 'react';\nimport { X, Phone, Heart, Users, ExternalLink } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n\ninterface CrisisModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CrisisModal({ isOpen, onClose }: CrisisModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-96 overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold text-gray-900\">Crisis Resources</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n            <h3 className=\"font-semibold text-red-800 mb-2 flex items-center\">\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Immediate Crisis Help\n            </h3>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>988 Suicide & Crisis Lifeline:</strong> Call or text 988</p>\n              <p><strong>Crisis Text Line:</strong> Text HOME to 741741</p>\n              <p><strong>Emergency Services:</strong> Call 911</p>\n              <p><strong>International:</strong> Visit <a href=\"https://findahelpline.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-red-700 underline\">findahelpline.com</a></p>\n            </div>\n          </div>\n          \n          <div className=\"border border-blue-200 rounded-lg p-4 bg-blue-50\">\n            <h3 className=\"font-semibold text-blue-800 mb-2 flex items-center\">\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Mental Health Support\n            </h3>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>NAMI Helpline:</strong> 1-800-950-NAMI (6264)</p>\n              <p><strong>SAMHSA Helpline:</strong> 1-800-662-4357</p>\n              <p><strong>Teen Line:</strong> Call 310-855-4673 or text TEEN to 839863</p>\n              <p><strong>LGBT National Hotline:</strong> 1-888-843-4564</p>\n            </div>\n          </div>\n          \n          <div className=\"border border-green-200 rounded-lg p-4 bg-green-50\">\n            <h3 className=\"font-semibold text-green-800 mb-2 flex items-center\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Online Communities & Resources\n            </h3>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>7 Cups:</strong> Free emotional support chat</p>\n              <p><strong>Crisis Text Line:</strong> 24/7 text support</p>\n              <p><strong>Mental Health America:</strong> <a href=\"https://mhanational.org\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-green-700 underline\">mhanational.org</a></p>\n              <p><strong>National Suicide Prevention Lifeline:</strong> <a href=\"https://suicidepreventionlifeline.org\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-green-700 underline\">988lifeline.org</a></p>\n            </div>\n          </div>\n\n          <div className=\"border border-purple-200 rounded-lg p-4 bg-purple-50\">\n            <h3 className=\"font-semibold text-purple-800 mb-2\">International Resources</h3>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>UK:</strong> Samaritans - 116 123</p>\n              <p><strong>Canada:</strong> Talk Suicide Canada - 1-833-456-4566</p>\n              <p><strong>Australia:</strong> Lifeline - 13 11 14</p>\n              <p><strong>Global:</strong> <a href=\"https://www.iasp.info/resources/Crisis_Centres/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-purple-700 underline\">International Crisis Centers</a></p>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3769},"client/src/components/chat/MessageBubble.tsx":{"content":"import { format } from 'date-fns';\nimport { Heart, User } from 'lucide-react';\nimport type { Message } from '@shared/schema';\n\ninterface MessageBubbleProps {\n  message: Message;\n}\n\nexport function MessageBubble({ message }: MessageBubbleProps) {\n  const timeStr = format(message.timestamp, 'h:mm a');\n\n  if (message.isUser) {\n    return (\n      <div className=\"message-bubble\">\n        <div className=\"flex items-start space-x-3 justify-end\">\n          <div className=\"bg-support-primary text-white rounded-2xl rounded-tr-md px-4 py-3 max-w-xs sm:max-w-md\">\n            <p className=\"text-sm sm:text-base\">{message.content}</p>\n            <div className=\"text-xs text-blue-100 mt-2\">{timeStr}</div>\n          </div>\n          <div className=\"w-10 h-10 bg-support-accent rounded-full flex items-center justify-center text-white flex-shrink-0\">\n            <User className=\"w-5 h-5\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"message-bubble\">\n      <div className=\"flex items-start space-x-3\">\n        <div className=\"support-gradient w-10 h-10 rounded-full flex items-center justify-center text-white flex-shrink-0\">\n          <Heart className=\"w-5 h-5\" />\n        </div>\n        <div className=\"bg-gray-50 rounded-2xl rounded-tl-md px-4 py-3 max-w-xs sm:max-w-md\">\n          <p className=\"text-gray-800 text-sm sm:text-base\">{message.content}</p>\n          <div className=\"text-xs text-support-text mt-2\">{timeStr}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1516},"client/src/components/chat/QuickActions.tsx":{"content":"interface QuickActionsProps {\n  onActionClick: (message: string) => void;\n}\n\nexport function QuickActions({ onActionClick }: QuickActionsProps) {\n  const quickActions = [\n    \"I'm feeling anxious\",\n    \"I'm stressed about school\", \n    \"I need someone to talk to\",\n    \"I'm having trouble sleeping\",\n    \"I feel overwhelmed\"\n  ];\n\n  return (\n    <div className=\"flex flex-wrap gap-2 mt-3\">\n      {quickActions.map((action, index) => (\n        <button\n          key={index}\n          onClick={() => onActionClick(action)}\n          className=\"bg-white text-support-text px-3 py-1 rounded-full text-sm border border-gray-200 hover:bg-support-primary hover:text-white transition-colors\"\n        >\n          {action}\n        </button>\n      ))}\n    </div>\n  );\n}\n","size_bytes":759},"client/src/components/chat/TypingIndicator.tsx":{"content":"import { Heart } from 'lucide-react';\n\ninterface TypingIndicatorProps {\n  isVisible: boolean;\n}\n\nexport function TypingIndicator({ isVisible }: TypingIndicatorProps) {\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"typing-indicator active items-start space-x-3\">\n      <div className=\"support-gradient w-10 h-10 rounded-full flex items-center justify-center text-white flex-shrink-0\">\n        <Heart className=\"w-5 h-5\" />\n      </div>\n      <div className=\"bg-gray-50 rounded-2xl rounded-tl-md px-4 py-3\">\n        <div className=\"flex space-x-1\">\n          <div className=\"w-2 h-2 bg-support-text rounded-full animate-bounce\"></div>\n          <div className=\"w-2 h-2 bg-support-text rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n          <div className=\"w-2 h-2 bg-support-text rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":938},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}